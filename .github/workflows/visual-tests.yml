name: 🎨 Design System Quality Checks

on:
  pull_request:
    branches: [main]
    paths:
      - "stories/**"
      - ".storybook/**"
      - "src/**"
      - "styles/**"

jobs:
  design-system-checks:
    name: 🎨 Design System Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📚 Install dependencies
        run: npm ci

      - name: 🏗️ Build Storybook
        run: npm run build-storybook
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: 🔍 Validate Storybook Structure
        run: |
          echo "🔍 Validating Storybook build structure..."

          # Check if essential files exist
          if [ ! -f "storybook-static/index.html" ]; then
            echo "❌ Storybook index.html not found"
            exit 1
          fi

          if [ ! -f "storybook-static/index.json" ]; then
            echo "❌ Storybook index.json not found"
            exit 1
          fi

          echo "✅ Storybook structure validation passed"

      - name: 🎨 Check CSS Custom Properties
        run: |
          echo "🎨 Checking for CSS custom properties (design tokens)..."

          # Look for CSS custom properties in build
          if find storybook-static -name "*.css" -exec grep -l "var(--" {} \; | head -1; then
            echo "✅ CSS custom properties found - design tokens are being used"
          else
            echo "⚠️ No CSS custom properties detected - consider using design tokens"
          fi

      - name: � Check Theme Support
        run: |
          echo "� Checking for theme support..."

          # Check for theme-related files or configurations
          if grep -r "theme\|dark\|light" storybook-static/ --include="*.js" --include="*.json" | head -1; then
            echo "✅ Theme support detected"
          else
            echo "⚠️ No theme support detected"
          fi

      - name: ♿ Basic Accessibility Validation
        run: |
          echo "♿ Running basic accessibility checks..."

          # Check for accessibility attributes in stories
          if find stories -name "*.jsx" -o -name "*.js" | xargs grep -l "aria-\|role=\|alt=" | head -1; then
            echo "✅ Accessibility attributes found in stories"
          else
            echo "⚠️ Consider adding accessibility attributes to components"
          fi

          # Check for semantic HTML elements
          if find stories -name "*.jsx" -o -name "*.js" | xargs grep -l "<button\|<nav\|<main\|<header\|<footer" | head -1; then
            echo "✅ Semantic HTML elements found"
          else
            echo "⚠️ Consider using semantic HTML elements"
          fi

      - name: � Component Coverage Report
        run: |
          echo "📊 Generating component coverage report..."

          # Count total components
          TOTAL_COMPONENTS=$(find stories/components -name "*.jsx" | wc -l)

          # Count components with stories
          COMPONENTS_WITH_STORIES=$(find stories/components -name "*.stories.js" | wc -l)

          echo "📈 Component Statistics:"
          echo "  - Total components: $TOTAL_COMPONENTS"
          echo "  - Components with stories: $COMPONENTS_WITH_STORIES"

          if [ $COMPONENTS_WITH_STORIES -gt 0 ] && [ $TOTAL_COMPONENTS -gt 0 ]; then
            COVERAGE=$((COMPONENTS_WITH_STORIES * 100 / TOTAL_COMPONENTS))
            echo "  - Story coverage: $COVERAGE%"
            
            if [ $COVERAGE -lt 50 ]; then
              echo "⚠️ Story coverage is below 50% - consider adding more stories"
            else
              echo "✅ Good story coverage"
            fi
          fi

      - name: 📝 Generate Summary
        run: |
          echo "📝 Design System Quality Summary:"
          echo "✅ Storybook builds successfully"
          echo "✅ Static quality checks completed"
          echo "💡 For visual regression testing, consider setting up Chromatic or similar tools"
          echo "💡 For comprehensive accessibility testing, consider adding axe-core or similar tools"
